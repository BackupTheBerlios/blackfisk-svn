Welcome to wxSerialize - This class provides serialization for wxWidgets with the following features:

    - wxInputStream / wxOutputStream serializing (so practically to all wxWidgets streams)
    - With versioning to check what version the stream has
    - With header check to make sure it's your stream
    - Fully unicode compliant
    - Streams are binary compatible on linux and windows (interchangable)
    - EnterObject() / LeaveObject() can be used to mark boundaries and auto skipping
    - Older streams with less info can still be read by newer applications without any significant changes
    - Newer streams can be read by older applications without problems
    - All basic types are supported: wxString, wxArrayString, int, char, boolean, int8, int16, int32, double, etc
    - Strings are written in UNICODE always, even serializing between unicode / non-unicode builds will work	

CHANGELOG:
----------
v1.1: 
    - Name change from wxArchive to wxSerialize, because wxArchive is already a known class
    - GPLv3 license added thanks to Christian Buhtz
    - ConvertToIEEEExtended compile error fixed
    - LoadDouble / SaveDouble now use wxFloat64
    - Updated documentation for wxSerialize::Eof()
    
v1.0.1:
    - Fixed bug - 0000073: Missing function implementation
    - Implemented Read / Write with wxMemoryBuffer for writing records
    
v1.0:
    - UNICODE support added (fixed bug: 0071)
    - Fixed some compile errors on wx2.7
    - Added better structure in the source
    
KNOWN ISSUES
------------
As from wx2.8.4, the wxStringInputStream and wxStringOutputStream tests have been 
removed, because it segfaulted my code. I traced the code back and it appears 
reading back from a wxStringInputStream is somehow broken. The code that reads 
back from normal streams works just fine, so I assume this is not wxSerialize 
that is at fault. To enable the tests, in the archive_test.cpp file simply 
uncomment #define USE_STRINGSTREAM. 

INFO:
-----
    Check the site for more information: http://wastebucket.solidsteel.nl
    
    Online documentation: http://www.xs4all.nl/~jorgb/components/archive/help/
    
    
HOW TO BUILD
------------

1.1 CODE::BLOCKS
----------------
    With Code::Blocks, see "projects/codeblocks" for the project

1.2 CMAKE
---------
    CMake is used as primary make generator. I urge you to download CMake, available for all platforms where wxWidgets works on.
    
    What should you do ... 
        
        1) Download and install CMake 2.05 (or up) from http://www.cmake.org
        2) Make a subdir called /build, for example:
        
        /src/common/build/
        
    LINUX complatible OS'es ONLY:
    
        3) Make sure you are in that directory, and type:
        
            ccmake ../
            
        This should show you the wizard, and follow instructions. In general that means, press 'c' for configuring, 
        and after that press 'g' for generate. Now you have a directory with makefiles, and the necessary configure
        scripts. At this point, wxWidgets is located on your system and also included in your makefiles.
        
        4) If all went well, use make to build 
        
    WINDOWS types ONLY:
    
        3) Check CMakeLists.txt in the main archive dir, and make sure your config matches the one in CMakeLists.txt like
           UNICODE, UNIVERSAL, SHARED, MONOLITHIC, etc.
        3) Start CMakeSetup.exe, fill in the following dirs;
        
            Where is the sourcecode; 	 {the path where source is unzipped}
            
            Where to build the binaries; {the path where source is unzipped}\build\
                    
            Press Configure. When all goes well, some red entries are displayed. If you get any error, you most likely
            can't build that IDE, or you don't have wxWidgets installed on your system.
            
        4) Press Configure until the OK button shows. Press the OK button and you will have a number of IDE files
        in your build dir you selected. From there you can build the wxminiparser in your favorite IDE.
	   
1.3 SINGLE
----------
    wxSerialize is a single header and single cpp file. This means just adding these will work in your current project and is the preferred method.
